;; Hey, Emacs! This is a -*- lisp -*- file!
(in-package :stumpwm)

(defun x-setup-once ()
  (defvar *x-setup-initialized*)
  (if (boundp '*initialized*)
      (message "Already initialized, so skipping X setup.")
      (progn
        (run-shell-command "trayer --SetDockType false --transparent false --SetPartialStrut --widthtype --expand false --width 50")
        (run-shell-command "nm-applet --sm-disable")
        (run-shell-command "blueman-applet")
        (run-shell-command "indicator-sound-switcher")
        (run-shell-command "xscreensaver &")
        (setq *x-setup-initialized* t))))

(defun amixer-set-master (set-to)
  "Uses amixer to set Master, echoing that part of the response that includes the volume."
  (message
   (run-shell-command
    (concatenate 'string "amixer set Master " set-to " | grep '\[*%\]'")
    t)))

(defun xbacklight-inc (by)
  "Uses xbacklight to increment (or decrement) the backlight level"
  (run-shell-command (concatenate 'string "xbacklight " by))
  (message (concatenate 'string "backlight " (run-shell-command "xbacklight" t))))

(defun find-pathname-recursive (pathname-list)
  (let ((possible-pathname (car pathname-list)))
    (if (probe-file possible-pathname)
        possible-pathname
        (find-pathname-recursive (cdr pathname-list)))))

(defun bat-pathname ()
  (let ((possible-pathnames '("/sys/class/power_supply/BAT1" "/sys/class/power_supply/BAT0")))
    (find-pathname-recursive possible-pathnames)))

(defun now-pathname ()
  (let ((possible-pathnames `(,(concatenate 'string (bat-pathname) "/" "energy_now")
                               ,(concatenate 'string (bat-pathname) "/" "charge_now"))))
    (find-pathname-recursive possible-pathnames)))

(defun full-pathname ()
  (let ((possible-pathnames `(,(concatenate 'string (bat-pathname) "/" "energy_full")
                               ,(concatenate 'string (bat-pathname) "/" "charge_full"))))
    (find-pathname-recursive possible-pathnames)))

(defun read-energy (name)
  (let ((energy-file (open name)))
    (read energy-file)))

(defcommand raise-backlight () ()
            "Raise backlight via xbacklight"
            (xbacklight-inc "+5"))

(defcommand lower-backlight () ()
            "Lower backlight via xbacklight"
            (xbacklight-inc "-5"))

(defcommand raise-volume () ()
            "Raise volume via amixer"
            (amixer-set-master "5+"))

(defcommand lower-volume () ()
            "Lower volume via amixer"
            (amixer-set-master "5-"))

(defcommand toggle-mute-volume () ()
            "Toggle volume mute via amixer"
            (run-shell-command "amixer -D pulse set Master toggle"))

(defcommand suspend () ()
            "Suspends the system (to RAM)"
            (progn
              (run-shell-command
               "xscreensaver-command -lock")
              (run-shell-command
               "dbus-send --system --print-reply --dest='org.freedesktop.UPower' /org/freedesktop/UPower org.freedesktop.UPower.Suspend")))

(defcommand show-battery-state () ()
            "Shows the state of the first battery"
            (let ((energy-now (read-energy (now-pathname)))
                  (energy-full (read-energy (full-pathname))))
              (echo (concatenate
                     'string
                     (write-to-string (float (* (/ energy-now energy-full) 100)))
                     "%"))))

(defcommand screen-saver () ()
            "Turns off the screen until a key is pressed"
            (run-shell-command
             "xscreensaver-command -lock"))

(defcommand nemo () ()
            "Start Nemo unless it is already running, in which case focus it."
            (run-or-raise "nemo --no-desktop" '(:class "Nemo")))

(defcommand firefox () ()
            "Start Firefox unless it is already running, in which case focus it."
            (run-or-raise "firefox" '(:class "Firefox")))

(defcommand chromium () ()
            "Start Chromium unless it is already running, in which case focus it."
            (run-or-raise "chromium-browser" '(:class "chromium-browser")))

(defcommand terminal () ()
            "Start terminator unless it is already running, in which case focus it."
            (run-or-raise "terminator" '(:class "Terminator")))

(defcommand spotify () ()
            "Start Spotify unless it is already running, in which case focus it."
            (run-or-raise "spotify" '(:class "Spotify")))

(defcommand idea () ()
            "Start IntelliJ IDEA unless it is already running, in which case focus it."
            (run-or-raise "idea.sh" '(:class "jetbrains-idea")))

(defcommand spotify-next-track () ()
            "Skip to the next track in Spotify."
            (run-shell-command "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next"))

(defcommand spotify-previous-track () ()
            "Skip to the previous track in Spotify."
            (run-shell-command "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous"))

(defcommand spotify-toggle-play () ()
            "Toggles Play / Pause in Spotify."
            (run-shell-command "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause"))

(let ((home (sb-unix::posix-getenv "HOME")))

  ;; X setup
  (x-setup-once)

  (define-keysym #x1008ff02 "XF86MonBrightnessUp")
  (define-keysym #x1008ff03 "XF86MonBrightnessDown")

  ;; my hotkeys (thanks in part to http://stumpwm.svkt.org/cgi-bin/wiki.pl)
  (define-key *root-map* (kbd "B") "show-battery-state")
  (define-key *root-map* (kbd "x") "nemo")
  (define-key *root-map* (kbd "DEL") "quit")
  (define-key *root-map* (kbd "q") "suspend")
  (define-key *root-map* (kbd "L") "screen-saver")
  (define-key *root-map* (kbd "M-s") "spotify")
  (define-key *root-map* (kbd "]") "spotify-next-track")
  (define-key *root-map* (kbd "[") "spotify-previous-track")
  (define-key *root-map* (kbd "\\") "spotify-toggle-play")
  (define-key *root-map* (kbd "d") "firefox")
  (define-key *root-map* (kbd "D") "chromium")
  (define-key *root-map* (kbd "c") "terminal")
  (define-key *root-map* (kbd "M-RET") "swapcaps")
  (define-key *root-map* (kbd "j") "idea")

  ;; map media keys
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
  (define-key *top-map* (kbd "XF86AudioMute") "toggle-mute-volume")
  (define-key *top-map* (kbd "XF86MonBrightnessUp") "raise-backlight")
  (define-key *top-map* (kbd "XF86MonBrightnessDown") "lower-backlight")

  ;; alternatives to media keys for keyboards without same
  (define-key *root-map* (kbd "M-=") "raise-volume")
  (define-key *root-map* (kbd "M-\-") "lower-volume")
  (define-key *root-map* (kbd "M-m") "toggle-mute-volume")
  (define-key *root-map* (kbd "M-0") "raise-backlight")
  (define-key *root-map* (kbd "M-9") "lower-backlight")

  ;; startup stuff - safe to do this multiple times
  (run-shell-command (concatenate 'string "xsetbg -border black -center " home "/Pictures/stumpwm_wallpaper.jpg"))

  ;; swap CAPS and CTRL
  (run-shell-command "setxkbmap -option ctrl:swapcaps"))

(setq *window-format* "%n%s%80t [%20c]")
