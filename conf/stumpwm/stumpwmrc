;; Hey, Emacs! This is a -*- lisp -*- file!
(in-package :stumpwm)

(defun amixer-set-master (set-to)
  "Uses amixer to set Master, echoing that part of the response that includes the volume."
  (message
   (run-shell-command
    (concatenate 'string "amixer set Master " set-to " | grep '\[*%\]'")
    t)))

(defun find-pathname-recursive (pathname-list)
  (let ((possible-pathname (car pathname-list)))
    (if (probe-file possible-pathname)
	possible-pathname
      (find-pathname-recursive (cdr pathname-list)))))

(defun bat-pathname ()
  (let ((possible-pathnames '("/sys/class/power_supply/BAT1" "/sys/class/power_supply/BAT0")))
    (find-pathname-recursive possible-pathnames)))

(defun read-energy (name)
  (let ((energy-file (open (concatenate 'string (bat-pathname) "/" name))))
    (read energy-file)))

(defcommand raise-volume () ()
  "Raise volume via amixer"
  (amixer-set-master "5+"))

(defcommand lower-volume () ()
  "Lower volume via amixer"
  (amixer-set-master "5-"))

(defcommand toggle-mute-volume () ()
  "Toggle volume mute via amixer"
  (amixer-set-master "toggle"))

(defcommand suspend () ()
  "Suspends the system (to RAM)"
  (run-shell-command
   "dbus-send --system --print-reply --dest='org.freedesktop.UPower' /org/freedesktop/UPower org.freedesktop.UPower.Suspend"))

(defcommand show-battery-state () ()
  "Shows the state of the first battery"
  (let ((energy-now (read-energy "energy_now"))
	(energy-full (read-energy "energy_full")))
    (echo (concatenate
	   'string
	   (write-to-string (float (* (/ energy-now energy-full) 100)))
	   "%"))))

(defcommand screen-saver () ()
  "Turns off the screen until a key is pressed"
  (run-shell-command
   "sleep 1;xset dpms force off"))

(defcommand firefox () ()
  "Start Firefox unless it is already running, in which case focus it."
  (run-or-raise "firefox" '(:title "Mozilla Firefox")))

(defcommand terminal () ()
  "Start gnome-terminal unless it is already running, in which case focus it."
  (run-or-raise "gnome-terminal -e tmux" '(:title "Terminal")))

(defcommand spotify () ()
  "Start Spotify unless it is already running, in which case focus it."
  (run-or-raise "spotify" '(:title "Spotify Premium")))

(defcommand thunderbird () ()
  "Start Thunderbird unless it is already running, in which case focus it."
  (run-or-raise "thunderbird" '(:title "Thunderbird")))

(defcommand nixnote () ()
  "Start Nixnote unless it is already running, in which case focus it."
  (run-or-raise "nixnote" '(:title "NixNote")))

(defcommand lock-screen () ()
  "Locks the screen."
  (run-shell-command "xlock"))

(let ((home (sb-unix::posix-getenv "HOME")))

  ;; GNOME Integration
  (run-shell-command "trayer --SetDockType false --transparent false --SetPartialStrut --widthtype --expand false --width 50")
  (run-shell-command "nm-applet --sm-disable")

  ;; my hotkeys (thanks in part to http://stumpwm.svkt.org/cgi-bin/wiki.pl)
  (define-key *root-map* (kbd "B") "show-battery-state")
  (define-key *root-map* (kbd "x") "exec nautilus --no-desktop")
  (define-key *root-map* (kbd "DEL") "quit")
  (define-key *root-map* (kbd "q") "suspend")
  (define-key *root-map* (kbd "L") "screen-saver")
  (define-key *root-map* (kbd "M-s") "spotify")
  (define-key *root-map* (kbd "d") "firefox")
  (define-key *root-map* (kbd "c") "terminal")
  (define-key *root-map* (kbd "T") "thunderbird")
  (define-key *root-map* (kbd "L") "lock-screen")
  (define-key *root-map* (kbd "N") "nixnote")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
  (define-key *top-map* (kbd "XF86AudioMute") "toggle-mute-volume")

  ;; startup stuff
  (run-shell-command (concatenate 'string "xsetbg -border black -center " home "/Pictures/stumpwm_wallpaper.jpg"))
  (run-shell-command "emacs")

  ;; swap CAPS and CTRL
  (run-shell-command "setxkbmap -option ctrl:swapcaps -option altwin:swap_lalt_lwin"))
